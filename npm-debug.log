0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@1.4.28
3 info using node@v0.10.36
4 verbose publish [ '.' ]
5 verbose cache add [ '.', null ]
6 verbose cache add name=undefined spec="." args=[".",null]
7 verbose parsed url { protocol: null,
7 verbose parsed url   slashes: null,
7 verbose parsed url   auth: null,
7 verbose parsed url   host: null,
7 verbose parsed url   port: null,
7 verbose parsed url   hostname: null,
7 verbose parsed url   hash: null,
7 verbose parsed url   search: null,
7 verbose parsed url   query: null,
7 verbose parsed url   pathname: '.',
7 verbose parsed url   path: '.',
7 verbose parsed url   href: '.' }
8 silly lockFile 3a52ce78- .
9 verbose lock . /Users/dan/.npm/3a52ce78-.lock
10 verbose tar pack [ '/Users/dan/.npm/ng-file-upload/2.2.2/package.tgz', '.' ]
11 verbose tarball /Users/dan/.npm/ng-file-upload/2.2.2/package.tgz
12 verbose folder .
13 info prepublish ng-file-upload@2.2.2
14 silly lockFile 1f1177db-tar tar://.
15 verbose lock tar://. /Users/dan/.npm/1f1177db-tar.lock
16 silly lockFile 0f8570ed-ng-file-upload-2-2-2-package-tgz tar:///Users/dan/.npm/ng-file-upload/2.2.2/package.tgz
17 verbose lock tar:///Users/dan/.npm/ng-file-upload/2.2.2/package.tgz /Users/dan/.npm/0f8570ed-ng-file-upload-2-2-2-package-tgz.lock
18 silly lockFile 1f1177db-tar tar://.
19 silly lockFile 1f1177db-tar tar://.
20 silly lockFile 0f8570ed-ng-file-upload-2-2-2-package-tgz tar:///Users/dan/.npm/ng-file-upload/2.2.2/package.tgz
21 silly lockFile 0f8570ed-ng-file-upload-2-2-2-package-tgz tar:///Users/dan/.npm/ng-file-upload/2.2.2/package.tgz
22 silly lockFile 85c7c242-npm-ng-file-upload-2-2-2-package /Users/dan/.npm/ng-file-upload/2.2.2/package
23 verbose lock /Users/dan/.npm/ng-file-upload/2.2.2/package /Users/dan/.npm/85c7c242-npm-ng-file-upload-2-2-2-package.lock
24 silly lockFile 85c7c242-npm-ng-file-upload-2-2-2-package /Users/dan/.npm/ng-file-upload/2.2.2/package
25 silly lockFile 85c7c242-npm-ng-file-upload-2-2-2-package /Users/dan/.npm/ng-file-upload/2.2.2/package
26 silly lockFile 3a52ce78- .
27 silly lockFile 3a52ce78- .
28 silly publish { name: 'ng-file-upload',
28 silly publish   version: '2.2.2',
28 silly publish   devDependencies:
28 silly publish    { grunt: '~0.4.1',
28 silly publish      'grunt-contrib-uglify': '~0.2.7',
28 silly publish      'grunt-contrib-copy': '~0.4.1',
28 silly publish      'grunt-text-replace': '~0.3.12',
28 silly publish      'grunt-git': '~0.2.14' },
28 silly publish   dependencies: { 'grunt-contrib-concat': '~0.5.0' },
28 silly publish   description: 'angular-file-upload ===================',
28 silly publish   main: 'Gruntfile.js',
28 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
28 silly publish   repository:
28 silly publish    { type: 'git',
28 silly publish      url: 'https://github.com/danialfarid/angular-file-upload.git' },
28 silly publish   keywords:
28 silly publish    [ 'angularjs',
28 silly publish      'angular-file-upload',
28 silly publish      'file-upload',
28 silly publish      'javascript' ],
28 silly publish   author: { name: 'danial.farid@gmail.com' },
28 silly publish   license: 'MIT',
28 silly publish   bugs: { url: 'https://github.com/danialfarid/angular-file-upload/issues' },
28 silly publish   homepage: 'https://github.com/danialfarid/angular-file-upload',
28 silly publish   readme: 'angular-file-upload\n===================\n\nLightweight Angular JS directive to upload files.<br/><br/>**Here is the <a href="https://angular-file-upload.appspot.com/" target="_blank">DEMO</a> page**.<br/> To help development of this module get me a <a target="_blank" href="https://angular-file-upload.appspot.com/donate.html">cup of tea <img src="https://angular-file-upload.appspot.com/img/tea.png" width="40" height="24" title="Icon made by Freepik.com"></a> or give it a thumbs up at [ngmodules](http://ngmodules.org/modules/angular-file-upload).\n\n\nTable of Content:\n* [Features](#features)\n* [Usage](#usage)\n* [Old Browsers](#old_browsers)\n* [Server Side](#server)\n  * [Java](#java)\n  * [Node.js](#node)\n  * [Rails](#rails)\n  * [PHP](#php)\n  * [.Net](#net)\n  * [Amazon S3 Upload](#s3)\n* [CORS](#cors)\n* [Install](#install)\n  * [Manual](#manual)\n  * [Bower](#bower)\n  * [Yeoman](#yeoman)\n  * [NuGet](#nuget)\n* [Questions, Issues and Contribution](#contrib)\n\n##<a name="features"></a> Features\n* Supports upload progress, cancel/abort upload while in progress, File drag and drop (html5), Directory drag and drop (webkit), CORS, `PUT(html5)`/`POST` methods.\n* Cross browser file upload (`HTML5` and `non-HTML5`) with Flash polyfill [FileAPI](https://github.com/mailru/FileAPI). Allows client side validation/modification before uploading the file\n* Direct upload to db services CouchDB, imgur, etc... with file\'s content type using `$upload.http()`. This enables progress event for angular http `POST`/`PUT` requests. See [#88(comment)](https://github.com/danialfarid/angular-file-upload/issues/88#issuecomment-31366487) for discussion and usage.\n* Seperate shim file, FileAPI files are loaded on demand for `non-HTML5` code meaning no extra load/code if you just need HTML5 support.\n* Lightweight using regular `$http` to upload (with shim for non-HTML5 browsers) so all angular `$http` features are available\n\n##<a name="usage"></a> Usage\n\n###Sample:\n```html\n<script src="angular.min.js"></script>\n<!-- shim is needed to support non-HTML5 FormData browsers (IE8-9)-->\n<script src="angular-file-upload-shim.min.js"></script> \n<script src="angular-file-upload.min.js"></script> \n\n<div ng-controller="MyCtrl">\n   Select File: <div class="button" ng-file-select ng-model="files">Select File</div>\n   \n   Drop File: <div ng-file-drop ng-model="files" class="drop-box" \n                   drag-over-class="dragover" multiple="true" \n                   allow-dir="true" accept="image/*,application/pdf">\n                       Drop Images or PDFs files here\n              </div>\n   <div ng-no-file-drop>File Farg/Drop is not supported for this browser</div>\n</div>\n```\nJS:\n```js\n//inject angular file upload directives and service.\nangular.module(\'myApp\', [\'angularFileUpload\']);\n\nmyApp.controller(\'MyCtrl\') = [ \'$scope\', \'$upload\', function($scope, $upload) {\n  $scope.$watch(\'files\', function() {\n    $scope.upload = $upload.upload({\n      url: \'server/upload/url\',\n      data: {myObj: $scope.myModelObj},\n      file: $scope.files\n    }).progress(function(evt) {\n      console.log(\'progress: \' + parseInt(100.0 * evt.loaded / evt.total) + \'% file :\'+ evt.config.file.name);\n    }).success(function(data, status, headers, config) {\n      console.log(\'file \' + config.file.name + \'is uploaded successfully. Response: \' + data);\n    });\n  }\n})];\n```\n\n### Full reference\n\n#### File select\n\n```html\n<button|div|input type="file"|ng-file-select|...\n    ng-file-select ng-model="myFiles" // binds the selected files to the scope model\n    ng-file-change="fileSelected($files, $event)" // will be called upon files being selected\n                                                  // you can use $scope.$watch(\'myFiles\') instead\n    ng-multiple="true|false" // default false, allows selecting multiple files\n    ng-capture="\'camera\'|\'other\'" // allows mobile devices to capture using camera\n    accept="image/*,*.pdf,*.xml" // see standard HTML file input accept attribute\n    input-file-...="..." // if you prefix the attr with (data-)input-file- it would\n                         // propagate that property to underlying <input type="file"...>\n                         // see #462. Use only if the elememt is not input type="file" already\n>Upload</button>\n```\n#### File drop\n```html\n<div|button|ng-file-drop|...\n    ng-file-drop ng-model="myFiles" // binds the dropped files to the scope model\n    ng-file-change="fileDropped($files, $event, $rejectedFiles)" //called upon files being dropped\n    ng-multiple="true|false" // default false, allows selecting multiple files. \n    accept="image/*" // wildcard filter for file types allowed for drop (comma separated)\n    ng-rejected-file-model="rejFiles" // bind to dropped files that do not match the accept wildcard\n    allow-dir="true|false" // default true, allow dropping files only for Chrome webkit browser\n    drag-over-class="{accept:\'acceptClass\', reject:\'rejectClass\', delay:100}|myDragOverClass|\n                    calcDragOverClass($event)" \n              // drag over css class behaviour. could be a string, a function returning class name \n              // or a json object {accept: \'c1\', reject: \'c2\', delay:10}. default "dragover"\n    drop-available="dropSupported" // set the value of scope model to true or false based on file\n                                  // drag&drop support for this browser\n    stop-propagation="true|false" // default false, whether to propagate drag/drop events.\n    hide-on-drop-not-available="true|false" // default true, hides element if file drag&drop is not supported\n>\nDrop files here\n</div>\n<div|... ng-no-file-drop>File Drag/drop is not supported</div>\n```\n\n#### $upload service:\n```js\n$upload.upload({\n  *url: \'server/upload/url\', // upload.php script, node.js route, or servlet url\n  *file: file,  // single file or an array of files (array is for html5 only)\n  method: \'POST\' or \'PUT\', default POST,\n  headers: {\'Authorization\': \'xxx\'}, // only for html5\n  fileName: \'doc.jpg\' or [\'1.jpg\', \'2.jpg\', ...], // to modify the name of the file(s)\n  /* \n  file formData name (\'Content-Disposition\'), server side request form name could be\n  an array  of names for multiple files (html5). Default is \'file\' */\n  fileFormDataName: \'myFile\' or [\'file[0]\', \'file[1]\', ...], \n  /* \n  data map. each field will be sent as a form field unless sendDataAsJson is true.\n  The values are converted to json string unless sendObjectAsJson or transformRequest is specified. */\n  data: {myObj: $scope.myModelObj}, \n  /* \n  send the whole data object as a json blob with the key "data". Server will recieve a "data" \n  form field binary of type \'application/json\'. default false html5 only */\n  sendDataAsJson: true|false,\n  /*\n  if the value of a form field is an object it will send it as an \'application/json\' blob type \n  rather than json string. default false. */\n  sendObjectAsJson: true|false,    \n  /* customize how data is added to the formData. See #40#issuecomment-28612000 for sample code. */\n  formDataAppender: function(formData, key, val){},\n  transforRequest: muTransformRequestFn, //called on each field or whole "data" depending on sendDataAsJson\n  withCredentials: true|false,\n  ... and all other angular $http() options could be used here.\n}).progress(function(evt) {\n  console.log(\'progress: \' + parseInt(100.0 * evt.loaded / evt.total) + \'% file :\'+ evt.config.file.name);\n}).success(function(data, status, headers, config) {\n  // file is uploaded successfully\n  console.log(\'file \' + config.file.name + \'is uploaded successfully. Response: \' + data);\n}).error(...\n/* access or attach event listeners to the underlying XMLHttpRequest */\n}).xhr(function(xhr){xhr.upload.addEventListener(...) \n/* return $http promise then(). Note that this promise does NOT have progress/abort/xhr functions */\n}).then(success, error, progress);\n\n/* alternative way of uploading, send the file binary with the file\'s content-type.\n   Could be used to upload files to CouchDB, imgur, etc... html5 FileReader is needed. \n   It could also be used to monitor the progress of a normal http post/put request. \n   Note that the whole file will be loaded in browser first so large files could crash the browser.\n   You should verify the file size before uploading with $upload.http().\n*/\n$upload.http({...})  // See 88#issuecomment-31366487 for sample code.\n```\n\n**Upload multiple files**: Only for HTML5 FormData browsers (not IE8-9) if you pass an array of files to `file` option it will upload all of them together in one request. In this case the `fileFormDataName` could be an array of names or a single string. For Rails or depending on your server append square brackets to the end (i.e. `file[]`). \nNon-html5 browsers due to flash limitation will still upload array of files one by one in a separate request. You should iterate over files and send them one by one if you want cross browser solution.\n\n**$upload.http()**: You can also use `$upload.http()` to send the file binary or any data to the server while being able to listen to progress event. See [#88](https://github.com/danialfarid/angular-file-upload/issues/88) for more details.\nThis is equivalent to angular $http() but allow you to listen to progress event for HTML5 browsers.\n\n**Rails progress event**: If your server is Rails and Apache you may need to modify server configurations for the server to support upload progress. See [#207](https://github.com/danialfarid/angular-file-upload/issues/207)\n\n**drag and drop styling**: For file drag and drop, `drag-over-class` could be used to style the drop zone. It can be a function that returns a class name based on the $event. Default is "dragover" string.\nIt could also be a json object `{accept: \'a\', \'reject\': \'r\', delay: 10}` that specify the class name for the accepted or rejected drag overs. \n`reject` param will only work in Chrome browser which provide information about dragged over content. However some file types are reported as empty by Chrome even though they will have correct type when they are dropped, so if your `accept` attribute wildcard depends on file types rather than file extensions it may not work for those files if their type is not reported by Chrome. \n`delay` param is there to fix css3 transition issues from dragging over/out/over [#277](https://github.com/danialfarid/angular-file-upload/issues/277).\n##<a name="old_browsers"></a> Old browsers\n\nFor browsers not supporting HTML5 FormData (IE8, IE9, ...) [FileAPI](https://github.com/mailru/FileAPI) module is used. \n**Note**: You need Flash installed on your browser since `FileAPI` uses Flash to upload files.\n\nThese two files  **`FileAPI.min.js`, `FileAPI.flash.swf`** will be loaded by the module on demand (no need to be included in the html) if the browser does not supports HTML5 FormData to avoid extra load for HTML5 browsers.\nYou can place these two files beside `angular-file-upload-shim(.min).js` on your server to be loaded automatically from the same path or you can specify the path to those files if they are in a different path using the following script:\n```html\n<script>\n    //optional need to be loaded before angular-file-upload-shim(.min).js\n    FileAPI = {\n        //only one of jsPath or jsUrl.\n        jsPath: \'/js/FileAPI.min.js/folder/\', \n        jsUrl: \'yourcdn.com/js/FileAPI.min.js\',\n        \n        //only one of staticPath or flashUrl.\n        staticPath: \'/flash/FileAPI.flash.swf/folder/\',\n        flashUrl: \'yourcdn.com/js/FileAPI.flash.swf\',\n\n        //forceLoad: true, html5: false //to debug flash in HTML5 browsers\n    }\n</script>\n<script src="angular-file-upload-shim.min.js"></script>...\n```\n**Old browsers known issues**: \n* Because of a Flash limitation/bug if the server doesn\'t send any response body the status code of the response will be always `204 \'No Content\'`. So if you have access to your server upload code at least return a character in the response for the status code to work properly.\n* Custom headers will not work due to a Flash limitation [#111](https://github.com/danialfarid/angular-file-upload/issues/111) [#224](https://github.com/danialfarid/angular-file-upload/issues/224) [#129](https://github.com/danialfarid/angular-file-upload/issues/129)\n* Due to Flash bug [#92](https://github.com/danialfarid/angular-file-upload/issues/92) Server HTTP error code 400 will be returned as 200 to the client. So avoid returning 400 on your server side for upload response otherwise it will be treated as a success response on the client side.\n* In case of an error response (http code >= 400) the custom error message returned from the server may not be available. For some error codes flash just provide a generic error message and ignores the response text. [#310](https://github.com/danialfarid/angular-file-upload/issues/310)\n\n##<a name="server"></a>Server Side\n\n#### <a name="java"></a>**Java**\nYou can find the sample server code in Java/GAE [here](https://github.com/danialfarid/angular-file-upload/blob/master/demo/src/com/df/angularfileupload/)\n#### <a name="node"></a>Node.js \n[Wiki Sample](https://github.com/danialfarid/angular-file-upload/wiki/node.js-example) provided by [chovy](https://github.com/chovy).\n\n[Another wiki](https://github.com/danialfarid/angular-file-upload/wiki/Node-example) using Express 4.0 and the Multiparty provided by [Jonathan White](https://github.com/JonathanZWhite)\n#### <a name="rails"></a>Rails\n[Wiki Sample](https://github.com/danialfarid/angular-file-upload/wiki/Rails-Example) provided by [guptapriyank](https://github.com/guptapriyank)\n\n**Rails progress event**: If your server is Rails and Apache you may need to modify server configurations for the server to support upload progress. See [#207](https://github.com/danialfarid/angular-file-upload/issues/207)\n\n#### <a name="php"></a>PHP\n[Wiki Sample] (https://github.com/danialfarid/angular-file-upload/wiki/PHP-Example)\n#### <a name="net"></a>.Net\nSample client and server code [demo/C#] (https://github.com/danialfarid/angular-file-upload/tree/master/demo/C%23) provided by [AtomStar](https://github.com/AtomStar)\n\n#### <a name="s3"></a>Amazon AWS S3 Upload\nThe <a href="https://angular-file-upload.appspot.com/" target="_blank">demo</a> page has an option to upload to S3.\nHere is a sample config options:\n```\n$upload.upload({\n        url: $\'https://angular-file-upload.s3.amazonaws.com/\', //S3 upload url including bucket name\n        method: \'POST\',\n        data : {\n          key: file.name, // the key to store the file on S3, could be file name or customized\n          AWSAccessKeyId: <YOUR AWS AccessKey Id>, \n          acl: \'private\', // sets the access to the uploaded file in the bucket: private or public \n          policy: $scope.policy, // base64-encoded json policy (see article below)\n          signature: $scope.signature, // base64-encoded signature based on policy string (see article below)\n          "Content-Type": file.type != \'\' ? file.type : \'application/octet-stream\', // content type of the file (NotEmpty)\n          filename: file.name // this is needed for Flash polyfill IE8-9\n        },\n        file: file,\n      });\n```\nThis article explain more about these fields: see [http://aws.amazon.com/articles/1434/](http://aws.amazon.com/articles/1434/)\nTo generate the policy and signature you need a server side tool as described [this](http://aws.amazon.com/articles/1434/) article.\nThese two values are generated from the json policy document which looks like this:\n```\n{"expiration": "2020-01-01T00:00:00Z",\n"conditions": [ \n  {"bucket": "angular-file-upload"}, \n  ["starts-with", "$key", ""],\n  {"acl": "private"},\n  ["starts-with", "$Content-Type", ""],\n  ["starts-with", "$filename", ""],\n  ["content-length-range", 0, 524288000]\n]\n}\n```\nThe [demo](https://angular-file-upload.appspot.com/) page provide a helper tool to generate the policy and signature from you from the json policy document. **Note**: Please use https protocol to access demo page if you are using this tool to genenrate signature and policy to protect your aws secret key which should never be shared.\n\nMake sure that you provide upload and CORS post to your bucket at AWS -> S3 -> bucket name -> Properties -> Edit bucket policy and Edit CORS Configuration. Samples of these two files:\n```\n{\n  "Version": "2012-10-17",\n  "Statement": [\n    {\n      "Sid": "UploadFile",\n      "Effect": "Allow",\n      "Principal": {\n        "AWS": "arn:aws:iam::xxxx:user/xxx"\n      },\n      "Action": [\n        "s3:GetObject",\n        "s3:PutObject"\n      ],\n      "Resource": "arn:aws:s3:::angular-file-upload/*"\n    },\n    {\n      "Sid": "crossdomainAccess",\n      "Effect": "Allow",\n      "Principal": "*",\n      "Action": "s3:GetObject",\n      "Resource": "arn:aws:s3:::angular-file-upload/crossdomain.xml"\n    }\n  ]\n}\n```\n```\n<?xml version="1.0" encoding="UTF-8"?>\n<CORSConfiguration xmlns="http://s3.amazonaws.com/doc/2006-03-01/">\n    <CORSRule>\n        <AllowedOrigin>http://angular-file-upload.appspot.com</AllowedOrigin>\n        <AllowedMethod>POST</AllowedMethod>\n        <AllowedMethod>GET</AllowedMethod>\n        <AllowedMethod>HEAD</AllowedMethod>\n        <MaxAgeSeconds>3000</MaxAgeSeconds>\n        <AllowedHeader>*</AllowedHeader>\n    </CORSRule>\n</CORSConfiguration>\n```\n\nFor IE8-9 flash polyfill you need to have a <a href=\'#crossdomain\'>crossdomain.xml</a> file at the root of you S3 bucket. Make sure the content-type of crossdomain.xml is text/xml and you provide read access to this file in your bucket policy.\n\n\nIf you have Node.js there is a separate github project created by [Nukul Bhasin](https://github.com/nukulb) as an example using this plugin here: [https://github.com/nukulb/s3-angular-file-upload](https://github.com/nukulb/s3-angular-file-upload)\n\n##<a name="cors"></a>CORS\nTo support CORS upload your server needs to allow cross domain requests. You can achive that by having a filter or interceptor on your upload file server to add CORS headers to the response similar to this:\n([sample java code](https://github.com/danialfarid/angular-file-upload/blob/master/demo/src/com/df/angularfileupload/CORSFilter.java))\n```java\nhttpResp.setHeader("Access-Control-Allow-Methods", "POST, PUT, OPTIONS");\nhttpResp.setHeader("Access-Control-Allow-Origin", "your.other.server.com");\nhttpResp.setHeader("Access-Control-Allow-Headers", "Content-Type"));\n```\nFor non-HTML5 IE8-9 browsers you would also need a `crossdomain.xml` file at the root of your server to allow CORS for flash:\n<a name="crossdomain"></a>([sample xml](https://angular-file-upload.appspot.com/crossdomain.xml))\n```xml\n<cross-domain-policy>\n  <site-control permitted-cross-domain-policies="all"/>\n  <allow-access-from domain="angular-file-upload.appspot.com"/>\n  <allow-http-request-headers-from domain="*" headers="*" secure="false"/>\n</cross-domain-policy>\n```\n\n\n##<a name="install"></a> Install\n\n####<a name="manual"></a> Manual download \nDownload latest release from [here](https://github.com/danialfarid/angular-file-upload-bower/releases)\n\n####<a name="bower"></a> Bower\n```sh\n#notice \'ng\' at the beginning of the module name not \'angular\'\nbower install ng-file-upload \n```\n```html\n<script src="angular(.min).js"></script>\n<script src="angular-file-upload-shim(.min).js"></script> <!-- for no html5 browsers support -->\n<script src="angular-file-upload(.min).js"></script> \n```\n\n####<a name="yeoman"></a> Yeoman with bower automatic include\n```\nbower install ng-file-upload --save\nbower install ng-file-upload-shim --save \n```\nbower.json\n```\n{\n  "dependencies": [..., "ng-file-upload-shim", "ng-file-upload", ...],\n}\n```\n####<a name="nuget"></a> NuGet\nPackage is also available on NuGet: http://www.nuget.org/packages/angular-file-upload with the help of [Georgios Diamantopoulos](https://github.com/georgiosd)\n\n##<a name="contrib"></a> Issues & Contribution\n\nFor questions, bug reports, and feature request please search through existing [issue](https://github.com/danialfarid/angular-file-upload/issues) and if you don\'t find and answer open a new one  [here](https://github.com/danialfarid/angular-file-upload/issues/new). If you need support send me an [email](danial.farid@gmail.com) to set up a session through [HackHands](https://hackhands.com/). You can also contact [me](https://github.com/danialfarid) for any non public concerns.\n\n\n\n\n',
28 silly publish   readmeFilename: 'README.md',
28 silly publish   gitHead: 'c53113262cdf807f2aaae7cc2af4c767e620478e',
28 silly publish   _id: 'ng-file-upload@2.2.2',
28 silly publish   _shasum: 'c93edbd403a8b74067acd5b5d2ca4bb837893411',
28 silly publish   _from: '.' }
29 verbose request where is /ng-file-upload
30 verbose request registry https://registry.npmjs.org/
31 verbose request id ff1ac2fdc0555a8e
32 verbose url raw /ng-file-upload
33 verbose url resolving [ 'https://registry.npmjs.org/', './ng-file-upload' ]
34 verbose url resolved https://registry.npmjs.org/ng-file-upload
35 verbose request where is https://registry.npmjs.org/ng-file-upload
36 info trying registry request attempt 1 at 16:59:15
37 http PUT https://registry.npmjs.org/ng-file-upload
38 http 403 https://registry.npmjs.org/ng-file-upload
39 verbose headers { date: 'Mon, 02 Feb 2015 21:59:17 GMT',
39 verbose headers   server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
39 verbose headers   'content-type': 'application/json',
39 verbose headers   'cache-control': 'max-age=60',
39 verbose headers   'content-length': '26006',
39 verbose headers   'accept-ranges': 'bytes',
39 verbose headers   via: '1.1 varnish',
39 verbose headers   'x-served-by': 'cache-ord1733-ORD',
39 verbose headers   'x-cache': 'MISS',
39 verbose headers   'x-cache-hits': '0',
39 verbose headers   'x-timer': 'S1422914356.438135,VS0,VE780',
39 verbose headers   'keep-alive': 'timeout=10, max=50',
39 verbose headers   connection: 'Keep-Alive' }
40 error publish Failed PUT 403
41 error Error: forbidden cannot modify pre-existing version: 2.2.2
41 error old={"name":"ng-file-upload","version":"2.2.2","devDependencies":{"grunt":"~0.4.1","grunt-contrib-uglify":"~0.2.7","grunt-contrib-copy":"~0.4.1","grunt-text-replace":"~0.3.12","grunt-git":"~0.2.14"},"dependencies":{"grunt-contrib-concat":"~0.5.0"},"description":"angular-file-upload ===================","main":"Gruntfile.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/danialfarid/angular-file-upload.git"},"keywords":["angularjs","angular-file-upload","file-upload","javascript"],"author":{"name":"Danial Farid"},"license":"MIT","bugs":{"url":"https://github.com/danialfarid/angular-file-upload/issues"},"homepage":"https://github.com/danialfarid/angular-file-upload","gitHead":"a9ef5994c04b15f3eb15a3cbafbf6227af0f4ed6","_id":"ng-file-upload@2.2.2","_shasum":"c602f8c6958d7d7628a12a29ff718b81dd0586d7","_from":"./","_npmVersion":"1.4.28","_npmUser":{"name":"danial.farid","email":"danial.farid@gmail.com"},"maintainers":[{"name":"danial.farid","email":"danial.farid@gmail.com"}],"dist":{"shasum":"c602f8c6958d7d7628a12a29ff718b81dd0586d7","tarball":"http://registry.npmjs.org/ng-file-upload/-/ng-file-upload-2.2.2.tgz"}}
41 error new={"name":"ng-file-upload","version":"2.2.2","devDependencies":{"grunt":"~0.4.1","grunt-contrib-uglify":"~0.2.7","grunt-contrib-copy":"~0.4.1","grunt-text-replace":"~0.3.12","grunt-git":"~0.2.14"},"dependencies":{"grunt-contrib-concat":"~0.5.0"},"description":"angular-file-upload ===================","main":"Gruntfile.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/danialfarid/angular-file-upload.git"},"keywords":["angularjs","angular-file-upload","file-upload","javascript"],"author":{"name":"danial.farid@gmail.com"},"license":"MIT","bugs":{"url":"https://github.com/danialfarid/angular-file-upload/issues"},"homepage":"https://github.com/danialfarid/angular-file-upload","readme":"angular-file-upload\u000a===================\u000a\u000aLightweight Angular JS directive to upload files.<br/><br/>**Here is the <a href=\"https://angular-file-upload.appspot.com/\" target=\"_blank\">DEMO</a> page**.<br/> To help development of this module get me a <a target=\"_blank\" href=\"https://angular-file-upload.appspot.com/donate.html\">cup of tea <img src=\"https://angular-file-upload.appspot.com/img/tea.png\" width=\"40\" height=\"24\" title=\"Icon made by Freepik.com\"></a> or give it a thumbs up at [ngmodules](http://ngmodules.org/modules/angular-file-upload).\u000a\u000a\u000aTable of Content:\u000a* [Features](#features)\u000a* [Usage](#usage)\u000a* [Old Browsers](#old_browsers)\u000a* [Server Side](#server)\u000a  * [Java](#java)\u000a  * [Node.js](#node)\u000a  * [Rails](#rails)\u000a  * [PHP](#php)\u000a  * [.Net](#net)\u000a  * [Amazon S3 Upload](#s3)\u000a* [CORS](#cors)\u000a* [Install](#install)\u000a  * [Manual](#manual)\u000a  * [Bower](#bower)\u000a  * [Yeoman](#yeoman)\u000a  * [NuGet](#nuget)\u000a* [Questions, Issues and Contribution](#contrib)\u000a\u000a##<a name=\"features\"></a> Features\u000a* Supports upload progress, cancel/abort upload while in progress, File drag and drop (html5), Directory drag and drop (webkit), CORS, `PUT(html5)`/`POST` methods.\u000a* Cross browser file upload (`HTML5` and `non-HTML5`) with Flash polyfill [FileAPI](https://github.com/mailru/FileAPI). Allows client side validation/modification before uploading the file\u000a* Direct upload to db services CouchDB, imgur, etc... with file's content type using `$upload.http()`. This enables progress event for angular http `POST`/`PUT` requests. See [#88(comment)](https://github.com/danialfarid/angular-file-upload/issues/88#issuecomment-31366487) for discussion and usage.\u000a* Seperate shim file, FileAPI files are loaded on demand for `non-HTML5` code meaning no extra load/code if you just need HTML5 support.\u000a* Lightweight using regular `$http` to upload (with shim for non-HTML5 browsers) so all angular `$http` features are available\u000a\u000a##<a name=\"usage\"></a> Usage\u000a\u000a###Sample:\u000a```html\u000a<script src=\"angular.min.js\"></script>\u000a<!-- shim is needed to support non-HTML5 FormData browsers (IE8-9)-->\u000a<script src=\"angular-file-upload-shim.min.js\"></script> \u000a<script src=\"angular-file-upload.min.js\"></script> \u000a\u000a<div ng-controller=\"MyCtrl\">\u000a   Select File: <div class=\"button\" ng-file-select ng-model=\"files\">Select File</div>\u000a   \u000a   Drop File: <div ng-file-drop ng-model=\"files\" class=\"drop-box\" \u000a                   drag-over-class=\"dragover\" multiple=\"true\" \u000a                   allow-dir=\"true\" accept=\"image/*,application/pdf\">\u000a                       Drop Images or PDFs files here\u000a              </div>\u000a   <div ng-no-file-drop>File Farg/Drop is not supported for this browser</div>\u000a</div>\u000a```\u000aJS:\u000a```js\u000a//inject angular file upload directives and service.\u000aangular.module('myApp', ['angularFileUpload']);\u000a\u000amyApp.controller('MyCtrl') = [ '$scope', '$upload', function($scope, $upload) {\u000a  $scope.$watch('files', function() {\u000a    $scope.upload = $upload.upload({\u000a      url: 'server/upload/url',\u000a      data: {myObj: $scope.myModelObj},\u000a      file: $scope.files\u000a    }).progress(function(evt) {\u000a      console.log('progress: ' + parseInt(100.0 * evt.loaded / evt.total) + '% file :'+ evt.config.file.name);\u000a    }).success(function(data, status, headers, config) {\u000a      console.log('file ' + config.file.name + 'is uploaded successfully. Response: ' + data);\u000a    });\u000a  }\u000a})];\u000a```\u000a\u000a### Full reference\u000a\u000a#### File select\u000a\u000a```html\u000a<button|div|input type=\"file\"|ng-file-select|...\u000a    ng-file-select ng-model=\"myFiles\" // binds the selected files to the scope model\u000a    ng-file-change=\"fileSelected($files, $event)\" // will be called upon files being selected\u000a                                                  // you can use $scope.$watch('myFiles') instead\u000a    ng-multiple=\"true|false\" // default false, allows selecting multiple files\u000a    ng-capture=\"'camera'|'other'\" // allows mobile devices to capture using camera\u000a    accept=\"image/*,*.pdf,*.xml\" // see standard HTML file input accept attribute\u000a    input-file-...=\"...\" // if you prefix the attr with (data-)input-file- it would\u000a                         // propagate that property to underlying <input type=\"file\"...>\u000a                         // see #462. Use only if the elememt is not input type=\"file\" already\u000a>Upload</button>\u000a```\u000a#### File drop\u000a```html\u000a<div|button|ng-file-drop|...\u000a    ng-file-drop ng-model=\"myFiles\" // binds the dropped files to the scope model\u000a    ng-file-change=\"fileDropped($files, $event, $rejectedFiles)\" //called upon files being dropped\u000a    ng-multiple=\"true|false\" // default false, allows selecting multiple files. \u000a    accept=\"image/*\" // wildcard filter for file types allowed for drop (comma separated)\u000a    ng-rejected-file-model=\"rejFiles\" // bind to dropped files that do not match the accept wildcard\u000a    allow-dir=\"true|false\" // default true, allow dropping files only for Chrome webkit browser\u000a    drag-over-class=\"{accept:'acceptClass', reject:'rejectClass', delay:100}|myDragOverClass|\u000a                    calcDragOverClass($event)\" \u000a              // drag over css class behaviour. could be a string, a function returning class name \u000a              // or a json object {accept: 'c1', reject: 'c2', delay:10}. default \"dragover\"\u000a    drop-available=\"dropSupported\" // set the value of scope model to true or false based on file\u000a                                  // drag&drop support for this browser\u000a    stop-propagation=\"true|false\" // default false, whether to propagate drag/drop events.\u000a    hide-on-drop-not-available=\"true|false\" // default true, hides element if file drag&drop is not supported\u000a>\u000aDrop files here\u000a</div>\u000a<div|... ng-no-file-drop>File Drag/drop is not supported</div>\u000a```\u000a\u000a#### $upload service:\u000a```js\u000a$upload.upload({\u000a  *url: 'server/upload/url', // upload.php script, node.js route, or servlet url\u000a  *file: file,  // single file or an array of files (array is for html5 only)\u000a  method: 'POST' or 'PUT', default POST,\u000a  headers: {'Authorization': 'xxx'}, // only for html5\u000a  fileName: 'doc.jpg' or ['1.jpg', '2.jpg', ...], // to modify the name of the file(s)\u000a  /* \u000a  file formData name ('Content-Disposition'), server side request form name could be\u000a  an array  of names for multiple files (html5). Default is 'file' */\u000a  fileFormDataName: 'myFile' or ['file[0]', 'file[1]', ...], \u000a  /* \u000a  data map. each field will be sent as a form field unless sendDataAsJson is true.\u000a  The values are converted to json string unless sendObjectAsJson or transformRequest is specified. */\u000a  data: {myObj: $scope.myModelObj}, \u000a  /* \u000a  send the whole data object as a json blob with the key \"data\". Server will recieve a \"data\" \u000a  form field binary of type 'application/json'. default false html5 only */\u000a  sendDataAsJson: true|false,\u000a  /*\u000a  if the value of a form field is an object it will send it as an 'application/json' blob type \u000a  rather than json string. default false. */\u000a  sendObjectAsJson: true|false,    \u000a  /* customize how data is added to the formData. See #40#issuecomment-28612000 for sample code. */\u000a  formDataAppender: function(formData, key, val){},\u000a  transforRequest: muTransformRequestFn, //called on each field or whole \"data\" depending on sendDataAsJson\u000a  withCredentials: true|false,\u000a  ... and all other angular $http() options could be used here.\u000a}).progress(function(evt) {\u000a  console.log('progress: ' + parseInt(100.0 * evt.loaded / evt.total) + '% file :'+ evt.config.file.name);\u000a}).success(function(data, status, headers, config) {\u000a  // file is uploaded successfully\u000a  console.log('file ' + config.file.name + 'is uploaded successfully. Response: ' + data);\u000a}).error(...\u000a/* access or attach event listeners to the underlying XMLHttpRequest */\u000a}).xhr(function(xhr){xhr.upload.addEventListener(...) \u000a/* return $http promise then(). Note that this promise does NOT have progress/abort/xhr functions */\u000a}).then(success, error, progress);\u000a\u000a/* alternative way of uploading, send the file binary with the file's content-type.\u000a   Could be used to upload files to CouchDB, imgur, etc... html5 FileReader is needed. \u000a   It could also be used to monitor the progress of a normal http post/put request. \u000a   Note that the whole file will be loaded in browser first so large files could crash the browser.\u000a   You should verify the file size before uploading with $upload.http().\u000a*/\u000a$upload.http({...})  // See 88#issuecomment-31366487 for sample code.\u000a```\u000a\u000a**Upload multiple files**: Only for HTML5 FormData browsers (not IE8-9) if you pass an array of files to `file` option it will upload all of them together in one request. In this case the `fileFormDataName` could be an array of names or a single string. For Rails or depending on your server append square brackets to the end (i.e. `file[]`). \u000aNon-html5 browsers due to flash limitation will still upload array of files one by one in a separate request. You should iterate over files and send them one by one if you want cross browser solution.\u000a\u000a**$upload.http()**: You can also use `$upload.http()` to send the file binary or any data to the server while being able to listen to progress event. See [#88](https://github.com/danialfarid/angular-file-upload/issues/88) for more details.\u000aThis is equivalent to angular $http() but allow you to listen to progress event for HTML5 browsers.\u000a\u000a**Rails progress event**: If your server is Rails and Apache you may need to modify server configurations for the server to support upload progress. See [#207](https://github.com/danialfarid/angular-file-upload/issues/207)\u000a\u000a**drag and drop styling**: For file drag and drop, `drag-over-class` could be used to style the drop zone. It can be a function that returns a class name based on the $event. Default is \"dragover\" string.\u000aIt could also be a json object `{accept: 'a', 'reject': 'r', delay: 10}` that specify the class name for the accepted or rejected drag overs. \u000a`reject` param will only work in Chrome browser which provide information about dragged over content. However some file types are reported as empty by Chrome even though they will have correct type when they are dropped, so if your `accept` attribute wildcard depends on file types rather than file extensions it may not work for those files if their type is not reported by Chrome. \u000a`delay` param is there to fix css3 transition issues from dragging over/out/over [#277](https://github.com/danialfarid/angular-file-upload/issues/277).\u000a##<a name=\"old_browsers\"></a> Old browsers\u000a\u000aFor browsers not supporting HTML5 FormData (IE8, IE9, ...) [FileAPI](https://github.com/mailru/FileAPI) module is used. \u000a**Note**: You need Flash installed on your browser since `FileAPI` uses Flash to upload files.\u000a\u000aThese two files  **`FileAPI.min.js`, `FileAPI.flash.swf`** will be loaded by the module on demand (no need to be included in the html) if the browser does not supports HTML5 FormData to avoid extra load for HTML5 browsers.\u000aYou can place these two files beside `angular-file-upload-shim(.min).js` on your server to be loaded automatically from the same path or you can specify the path to those files if they are in a different path using the following script:\u000a```html\u000a<script>\u000a    //optional need to be loaded before angular-file-upload-shim(.min).js\u000a    FileAPI = {\u000a        //only one of jsPath or jsUrl.\u000a        jsPath: '/js/FileAPI.min.js/folder/', \u000a        jsUrl: 'yourcdn.com/js/FileAPI.min.js',\u000a        \u000a        //only one of staticPath or flashUrl.\u000a        staticPath: '/flash/FileAPI.flash.swf/folder/',\u000a        flashUrl: 'yourcdn.com/js/FileAPI.flash.swf',\u000a\u000a        //forceLoad: true, html5: false //to debug flash in HTML5 browsers\u000a    }\u000a</script>\u000a<script src=\"angular-file-upload-shim.min.js\"></script>...\u000a```\u000a**Old browsers known issues**: \u000a* Because of a Flash limitation/bug if the server doesn't send any response body the status code of the response will be always `204 'No Content'`. So if you have access to your server upload code at least return a character in the response for the status code to work properly.\u000a* Custom headers will not work due to a Flash limitation [#111](https://github.com/danialfarid/angular-file-upload/issues/111) [#224](https://github.com/danialfarid/angular-file-upload/issues/224) [#129](https://github.com/danialfarid/angular-file-upload/issues/129)\u000a* Due to Flash bug [#92](https://github.com/danialfarid/angular-file-upload/issues/92) Server HTTP error code 400 will be returned as 200 to the client. So avoid returning 400 on your server side for upload response otherwise it will be treated as a success response on the client side.\u000a* In case of an error response (http code >= 400) the custom error message returned from the server may not be available. For some error codes flash just provide a generic error message and ignores the response text. [#310](https://github.com/danialfarid/angular-file-upload/issues/310)\u000a\u000a##<a name=\"server\"></a>Server Side\u000a\u000a#### <a name=\"java\"></a>**Java**\u000aYou can find the sample server code in Java/GAE [here](https://github.com/danialfarid/angular-file-upload/blob/master/demo/src/com/df/angularfileupload/)\u000a#### <a name=\"node\"></a>Node.js \u000a[Wiki Sample](https://github.com/danialfarid/angular-file-upload/wiki/node.js-example) provided by [chovy](https://github.com/chovy).\u000a\u000a[Another wiki](https://github.com/danialfarid/angular-file-upload/wiki/Node-example) using Express 4.0 and the Multiparty provided by [Jonathan White](https://github.com/JonathanZWhite)\u000a#### <a name=\"rails\"></a>Rails\u000a[Wiki Sample](https://github.com/danialfarid/angular-file-upload/wiki/Rails-Example) provided by [guptapriyank](https://github.com/guptapriyank)\u000a\u000a**Rails progress event**: If your server is Rails and Apache you may need to modify server configurations for the server to support upload progress. See [#207](https://github.com/danialfarid/angular-file-upload/issues/207)\u000a\u000a#### <a name=\"php\"></a>PHP\u000a[Wiki Sample] (https://github.com/danialfarid/angular-file-upload/wiki/PHP-Example)\u000a#### <a name=\"net\"></a>.Net\u000aSample client and server code [demo/C#] (https://github.com/danialfarid/angular-file-upload/tree/master/demo/C%23) provided by [AtomStar](https://github.com/AtomStar)\u000a\u000a#### <a name=\"s3\"></a>Amazon AWS S3 Upload\u000aThe <a href=\"https://angular-file-upload.appspot.com/\" target=\"_blank\">demo</a> page has an option to upload to S3.\u000aHere is a sample config options:\u000a```\u000a$upload.upload({\u000a        url: $'https://angular-file-upload.s3.amazonaws.com/', //S3 upload url including bucket name\u000a        method: 'POST',\u000a        data : {\u000a          key: file.name, // the key to store the file on S3, could be file name or customized\u000a          AWSAccessKeyId: <YOUR AWS AccessKey Id>, \u000a          acl: 'private', // sets the access to the uploaded file in the bucket: private or public \u000a          policy: $scope.policy, // base64-encoded json policy (see article below)\u000a          signature: $scope.signature, // base64-encoded signature based on policy string (see article below)\u000a          \"Content-Type\": file.type != '' ? file.type : 'application/octet-stream', // content type of the file (NotEmpty)\u000a          filename: file.name // this is needed for Flash polyfill IE8-9\u000a        },\u000a        file: file,\u000a      });\u000a```\u000aThis article explain more about these fields: see [http://aws.amazon.com/articles/1434/](http://aws.amazon.com/articles/1434/)\u000aTo generate the policy and signature you need a server side tool as described [this](http://aws.amazon.com/articles/1434/) article.\u000aThese two values are generated from the json policy document which looks like this:\u000a```\u000a{\"expiration\": \"2020-01-01T00:00:00Z\",\u000a\"conditions\": [ \u000a  {\"bucket\": \"angular-file-upload\"}, \u000a  [\"starts-with\", \"$key\", \"\"],\u000a  {\"acl\": \"private\"},\u000a  [\"starts-with\", \"$Content-Type\", \"\"],\u000a  [\"starts-with\", \"$filename\", \"\"],\u000a  [\"content-length-range\", 0, 524288000]\u000a]\u000a}\u000a```\u000aThe [demo](https://angular-file-upload.appspot.com/) page provide a helper tool to generate the policy and signature from you from the json policy document. **Note**: Please use https protocol to access demo page if you are using this tool to genenrate signature and policy to protect your aws secret key which should never be shared.\u000a\u000aMake sure that you provide upload and CORS post to your bucket at AWS -> S3 -> bucket name -> Properties -> Edit bucket policy and Edit CORS Configuration. Samples of these two files:\u000a```\u000a{\u000a  \"Version\": \"2012-10-17\",\u000a  \"Statement\": [\u000a    {\u000a      \"Sid\": \"UploadFile\",\u000a      \"Effect\": \"Allow\",\u000a      \"Principal\": {\u000a        \"AWS\": \"arn:aws:iam::xxxx:user/xxx\"\u000a      },\u000a      \"Action\": [\u000a        \"s3:GetObject\",\u000a        \"s3:PutObject\"\u000a      ],\u000a      \"Resource\": \"arn:aws:s3:::angular-file-upload/*\"\u000a    },\u000a    {\u000a      \"Sid\": \"crossdomainAccess\",\u000a      \"Effect\": \"Allow\",\u000a      \"Principal\": \"*\",\u000a      \"Action\": \"s3:GetObject\",\u000a      \"Resource\": \"arn:aws:s3:::angular-file-upload/crossdomain.xml\"\u000a    }\u000a  ]\u000a}\u000a```\u000a```\u000a<?xml version=\"1.0\" encoding=\"UTF-8\"?>\u000a<CORSConfiguration xmlns=\"http://s3.amazonaws.com/doc/2006-03-01/\">\u000a    <CORSRule>\u000a        <AllowedOrigin>http://angular-file-upload.appspot.com</AllowedOrigin>\u000a        <AllowedMethod>POST</AllowedMethod>\u000a        <AllowedMethod>GET</AllowedMethod>\u000a        <AllowedMethod>HEAD</AllowedMethod>\u000a        <MaxAgeSeconds>3000</MaxAgeSeconds>\u000a        <AllowedHeader>*</AllowedHeader>\u000a    </CORSRule>\u000a</CORSConfiguration>\u000a```\u000a\u000aFor IE8-9 flash polyfill you need to have a <a href='#crossdomain'>crossdomain.xml</a> file at the root of you S3 bucket. Make sure the content-type of crossdomain.xml is text/xml and you provide read access to this file in your bucket policy.\u000a\u000a\u000aIf you have Node.js there is a separate github project created by [Nukul Bhasin](https://github.com/nukulb) as an example using this plugin here: [https://github.com/nukulb/s3-angular-file-upload](https://github.com/nukulb/s3-angular-file-upload)\u000a\u000a##<a name=\"cors\"></a>CORS\u000aTo support CORS upload your server needs to allow cross domain requests. You can achive that by having a filter or interceptor on your upload file server to add CORS headers to the response similar to this:\u000a([sample java code](https://github.com/danialfarid/angular-file-upload/blob/master/demo/src/com/df/angularfileupload/CORSFilter.java))\u000a```java\u000ahttpResp.setHeader(\"Access-Control-Allow-Methods\", \"POST, PUT, OPTIONS\");\u000ahttpResp.setHeader(\"Access-Control-Allow-Origin\", \"your.other.server.com\");\u000ahttpResp.setHeader(\"Access-Control-Allow-Headers\", \"Content-Type\"));\u000a```\u000aFor non-HTML5 IE8-9 browsers you would also need a `crossdomain.xml` file at the root of your server to allow CORS for flash:\u000a<a name=\"crossdomain\"></a>([sample xml](https://angular-file-upload.appspot.com/crossdomain.xml))\u000a```xml\u000a<cross-domain-policy>\u000a  <site-control permitted-cross-domain-policies=\"all\"/>\u000a  <allow-access-from domain=\"angular-file-upload.appspot.com\"/>\u000a  <allow-http-request-headers-from domain=\"*\" headers=\"*\" secure=\"false\"/>\u000a</cross-domain-policy>\u000a```\u000a\u000a\u000a##<a name=\"install\"></a> Install\u000a\u000a####<a name=\"manual\"></a> Manual download \u000aDownload latest release from [here](https://github.com/danialfarid/angular-file-upload-bower/releases)\u000a\u000a####<a name=\"bower\"></a> Bower\u000a```sh\u000a#notice 'ng' at the beginning of the module name not 'angular'\u000abower install ng-file-upload \u000a```\u000a```html\u000a<script src=\"angular(.min).js\"></script>\u000a<script src=\"angular-file-upload-shim(.min).js\"></script> <!-- for no html5 browsers support -->\u000a<script src=\"angular-file-upload(.min).js\"></script> \u000a```\u000a\u000a####<a name=\"yeoman\"></a> Yeoman with bower automatic include\u000a```\u000abower install ng-file-upload --save\u000abower install ng-file-upload-shim --save \u000a```\u000abower.json\u000a```\u000a{\u000a  \"dependencies\": [..., \"ng-file-upload-shim\", \"ng-file-upload\", ...],\u000a}\u000a```\u000a####<a name=\"nuget\"></a> NuGet\u000aPackage is also available on NuGet: http://www.nuget.org/packages/angular-file-upload with the help of [Georgios Diamantopoulos](https://github.com/georgiosd)\u000a\u000a##<a name=\"contrib\"></a> Issues & Contribution\u000a\u000aFor questions, bug reports, and feature request please search through existing [issue](https://github.com/danialfarid/angular-file-upload/issues) and if you don't find and answer open a new one  [here](https://github.com/danialfarid/angular-file-upload/issues/new). If you need support send me an [email](danial.farid@gmail.com) to set up a session through [HackHands](https://hackhands.com/). You can also contact [me](https://github.com/danialfarid) for any non public concerns.\u000a\u000a\u000a\u000a\u000a","readmeFilename":"README.md","gitHead":"c53113262cdf807f2aaae7cc2af4c767e620478e","_id":"ng-file-upload@2.2.2","_shasum":"c93edbd403a8b74067acd5b5d2ca4bb837893411","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"danial.farid","email":"danial.farid@gmail.com"},"maintainers":[{"name":"danial.farid","email":"danial.farid@gmail.com"}],"dist":{"shasum":"c93edbd403a8b74067acd5b5d2ca4bb837893411","tarball":"http://registry.npmjs.org/ng-file-upload/-/ng-file-upload-2.2.2.tgz"}}: ng-file-upload
41 error     at RegClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:308:14)
41 error     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:246:65)
41 error     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:236:22)
41 error     at Request.emit (events.js:98:17)
41 error     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1142:14)
41 error     at Request.emit (events.js:117:20)
41 error     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1096:12)
41 error     at IncomingMessage.emit (events.js:117:20)
41 error     at _stream_readable.js:944:16
41 error     at process._tickCallback (node.js:442:13)
42 error If you need help, you may report this *entire* log,
42 error including the npm and node versions, at:
42 error     <http://github.com/npm/npm/issues>
43 error System Darwin 13.4.0
44 error command "node" "/usr/local/bin/npm" "publish"
45 error cwd /Users/dan/Documents/workspace/df/angular-file-upload
46 error node -v v0.10.36
47 error npm -v 1.4.28
48 verbose exit [ 1, true ]
